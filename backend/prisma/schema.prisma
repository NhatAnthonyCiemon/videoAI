generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id                   Int              @id @default(autoincrement())
  email                String?          @unique(map: "unique_email")
  username             String?
  password             String?
  social_id            String?          @unique(map: "unique_social_id")
  is_verify            Boolean?         @default(false)
  image                String?
  verificationtoken    String?          @unique(map: "unique_verificationtoken")
  type                 String?
  youtubeaccesstoken   String?
  youtuberefreshtoken  String?
  youtubetokenexpiry   DateTime?        @db.Timestamp(6)
  facebookaccesstoken  String?
  facebookrefreshtoken String?
  facebooktokenexpiry  DateTime?        @db.Timestamp(6)
  music_system         music_system[]
  share_url            share_url[]
  sticker_system       sticker_system[]
  videos               videos[]
}

model gallery_music {
  id   Int     @id @default(autoincrement())
  url  String
  name String?
}

model gallery_sticker {
  id   Int     @id @default(autoincrement())
  url  String
  name String?
}

model image_video {
  id             Int        @id @default(autoincrement())
  video_id       String?    @db.Char(10)
  ordinal_number Int
  url            String
  content        String?
  prompt         String?
  start_time     Float?     @db.Real
  end_time       Float?     @db.Real
  url_mp3        String?
  anim           Int?
  animation      animation? @relation(fields: [anim], references: [id_anim], onDelete: NoAction, onUpdate: NoAction)
  videos         videos?    @relation(fields: [video_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model music {
  id           Int           @id @default(autoincrement())
  video_id     String?       @db.Char(10)
  start_time   DateTime?     @db.Time(6)
  end_time     DateTime?     @db.Time(6)
  is_custom    Boolean?      @default(false)
  volume       Float?        @default(1.0) @db.Real
  id_music     Int?
  status       Boolean?      @default(true)
  music_system music_system? @relation(fields: [id_music], references: [id], onDelete: NoAction, onUpdate: NoAction)
  videos       videos?       @relation(fields: [video_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model subtitles {
  id               Int       @id @default(autoincrement())
  video_id         String?   @db.Char(10)
  start_time       DateTime? @db.Time(6)
  end_time         DateTime? @db.Time(6)
  content          String?
  align            String?
  position         String?
  font             String?
  color            String?
  effect           String?
  font_size        String?
  font_style       String?
  background_color String?
  status           Boolean?  @default(true)
  videos           videos?   @relation(fields: [video_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model ticker {
  id             Int             @id @default(autoincrement())
  video_id       String?         @db.Char(10)
  start_time     DateTime?       @db.Time(6)
  end_time       DateTime?       @db.Time(6)
  id_sticker     Int?
  width          Int?            @default(100)
  height         Int?            @default(100)
  po_x           Int?            @default(0)
  po_y           Int?            @default(0)
  status         Boolean?        @default(true)
  rotate         Int?            @default(0)
  sticker_system sticker_system? @relation(fields: [id_sticker], references: [id], onDelete: NoAction, onUpdate: NoAction)
  videos         videos?         @relation(fields: [video_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model video_info {
  video_id         String   @id @db.Char(10)
  music_bg         Boolean? @default(false)
  duration_seconds Int?
  videos           videos   @relation(fields: [video_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model videos {
  id              String        @id @db.Char(10)
  user_id         Int?
  name            String
  category        String?
  created_at      DateTime?     @default(now()) @db.Timestamp(6)
  view            Int?          @default(0)
  content         String?
  url             String?
  step            Int
  keyword         String?
  url_edit        String?
  is_custom_voice Boolean?
  duration        Float?        @db.Real
  thumbnail       String?
  quality         String?
  is_bg_music     Boolean?      @default(false)
  image_video     image_video[]
  music           music[]
  share_url       share_url?
  subtitles       subtitles[]
  ticker          ticker[]
  video_info      video_info?
  users           users?        @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  voice_info      voice_info?
}

model voice_info {
  video_id String  @id @db.Char(10)
  pitch    Float?
  rate     Float?
  voice    String?
  videos   videos  @relation(fields: [video_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model sticker_system {
  id      Int      @id @default(autoincrement())
  url     String?
  name    String?
  id_user Int?
  user    users?   @relation(fields: [id_user], references: [id])
  ticker  ticker[]
}

model music_system {
  id      Int     @id @default(autoincrement())
  name    String?
  id_user Int?
  url     String?
  music   music[]
  user    users?  @relation(fields: [id_user], references: [id])
}

model share_url {
  id           String  @id @db.Char(10)
  user_id      Int?
  url_facebook String?
  url_youtube  String?
  url_tiktok   String?
  users        users?  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_shareurl_user")
  videos       videos  @relation(fields: [id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_shareurl_video")
}

model animation {
  id_anim     Int           @id
  name        String?
  describe    String?
  url_anim    String?
  image_video image_video[]
}

model config {
  code     String  @id
  value    String?
  describe String?
}
